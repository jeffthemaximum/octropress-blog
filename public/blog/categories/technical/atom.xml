<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technical | Jeff's Recurse Center Blog]]></title>
  <link href="https://obscure-atoll-2224.herokuapp.com//blog/categories/technical/atom.xml" rel="self"/>
  <link href="https://obscure-atoll-2224.herokuapp.com//"/>
  <updated>2015-07-16T15:01:07-04:00</updated>
  <id>https://obscure-atoll-2224.herokuapp.com//</id>
  <author>
    <name><![CDATA[Jeff Maxim]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[subprocess.Popen: Using Python's Subprocess Module to Pipe Stdin and Stdout Between Processes]]></title>
    <link href="https://obscure-atoll-2224.herokuapp.com//blog/2015/07/15/subprocess-dot-popen-using-pythons-subprocess-module-to-pipe-stdin-and-stdout-between-processes/"/>
    <updated>2015-07-15T12:04:14-04:00</updated>
    <id>https://obscure-atoll-2224.herokuapp.com//blog/2015/07/15/subprocess-dot-popen-using-pythons-subprocess-module-to-pipe-stdin-and-stdout-between-processes</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say you have two programs that need to communicate with eachother via stdin and stdout. <a href="http://www2.cs.uregina.ca/~hamilton/courses/330/notes/unix/pipes/pipes.html">Pipes</a> is one way to accomplish this. A pipe is a connection between two processes such that the stdout of one program becomes the stdin of the other.</p>

<p>With python, this piping process is streamlined with the <a href="https://docs.python.org/2/library/subprocess.html">subprocess module</a>.</p>

<p>Let&rsquo;s look at an example of how this plays out in python. Take our first program, foo.py:</p>

<p><strong>foo.py:</strong></p>

<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; background-color: #eee;font-size: 12px;border: 1px dashed #999999;line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>import time
import sys

for i in range(0,10):
    print &quot;Hello world &quot; + str(i)
    sys.stdout.flush()
    time.sleep(1)
</code></pre>


<p>All foo.py does is print &ldquo;Hello World&rdquo; with an iterator number, and it does this every second. This is our sample output. Now, let&rsquo;s imagine a second program that is trying to catch the stdout from foo.py as stdin. Let&rsquo;s make that second program called bar.py, and it will be based on <a href="https://docs.python.org/2/library/subprocess.html">python&rsquo;s subprocess module documentation</a>:</p>

<p><strong>bar.py:</strong></p>

<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; background-color: #eee;font-size: 12px;border: 1px dashed #999999;line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>import subprocess

proc = subprocess.Popen(['python','foo.py'],stdin=subprocess.PIPE)

proc.communicate()
</code></pre>


<p>Running bar.py produces our desired result: it catches the stdout from foo.py, uses it as stdin, and prints &ldquo;Hello world&rdquo; plus an iterator to the console every second.</p>

<p>Now, let&rsquo;s say you want to catch each line of output from foo.py as a variable in bar.py, and maybe save that output to a variable in bar.py. Let&rsquo;s write baz.py, based on <a href="https://docs.python.org/2/library/subprocess.html">this post from stackoverflow</a>, to accomplish that goal:</p>

<p><strong>baz.py:</strong></p>

<pre style="font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; color: #000000; background-color: #eee;font-size: 12px;border: 1px dashed #999999;line-height: 14px;padding: 5px; overflow: auto; width: 100%"><code>import subprocess

proc = subprocess.Popen(['python','foo.py'],stdout=subprocess.PIPE)

while True:
  line = proc.stdout.readline()
  if line != '':
    print &quot;test: &quot;, line.rstrip()
  else:
    break
</code></pre>


<p>You&rsquo;ll notice two key differences between bar.py and baz.py. First, baz.py uses a &ldquo;stdout&rdquo; arg in it&rsquo;s call to subprocess.Popen, where bar.py uses a &ldquo;stdin&rdquo; arg here. Second, baz.py replaces bar.py&rsquo;s &ldquo;proc.communicate()&rdquo; call with a while-block. This while-block in baz.py accomplishes our goal of collecting each line of output from foo.py in a variable. With baz.py, we just print that variable out. However, you could presumably append that line to a list and save all your line variables in this way.</p>

<p>Any thoughts, questions, comments?</p>
]]></content>
  </entry>
  
</feed>
